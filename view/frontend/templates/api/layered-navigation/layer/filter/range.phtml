<?php
/**
 * Range filter renderer
 *
 * Makes use of the nouislider JS (https://refreshless.com/nouislider/)
 * Integration sample for the discountedPrice filter:
 * - the range filters are set via "min-price"&"max-price" parameters
 *
 * @var $block Boxalino\RealTimeUserExperience\Block\LayeredNavigation\Layer\Filter
 */
?>
<?php
$minValue = $block->getFilter()->getValues()[0]->getMinValue();
$maxValue = $block->getFilter()->getValues()[0]->getMaxValue();
$minSelectedValue = $block->getFilter()->getValues()[0]->getMinSelectedValue() ?? $block->getFilter()->getValues()[0]->getMinValue();
$maxSelectedValue = $block->getFilter()->getValues()[0]->getMaxSelectedValue() ?? $block->getFilter()->getValues()[0]->getMaxValue();
?>
<div id="rtux-range"></div>
<span id="slider-snap-value-lower"></span>
<span id="slider-snap-value-upper"></span>
<script>
    require([
        'jquery',
        'nouislider',
        'mage/translate'
    ], function ($,nouislider, $t) {
        'use strict';
        if(document.getElementById('rtux-range') !== null) {
            let slider = document.getElementById('rtux-range'),
                sliderMin = <?= $minValue;?>,
                sliderMax = <?= $maxValue;?>;

            nouislider.create(slider, {
                start: [<?= $minSelectedValue;?>,<?= $maxSelectedValue;?>],
                connect: true,
                behaviour: 'tap',
                step: 1,
                range: {'min': sliderMin,'max': sliderMax}
            });

            let snapElements = [document.getElementById('slider-snap-value-lower'), document.getElementById('slider-snap-value-upper')];
            let snapValues = [<?= $minSelectedValue?>,<?= $maxSelectedValue ?>];
            let snapHandleParameter=["min-price", "max-price"];

            slider.noUiSlider.on('update', function (values, handle) {
                let handlename = handle == 1 ? " " + "<?php /* @escapeNotVerified */ echo __('to slider') ?>" + " " :
                    "<?php /* @escapeNotVerified */ echo __('from slider') ?>" + " ";
                snapElements[handle].innerHTML = handlename + "<strong>" + values[handle] + "</strong>";
            });

            slider.noUiSlider.on('change', function (values, handle) {
                if(snapValues[handle] == values[handle]) return null;
                if(values[0] == values[1]) values[1]++;
                let params = location.search;
                let handlerParamSearch = new RegExp('[\?&]' + snapHandleParameter[handle] + '=([^&#]*)').exec(window.location.href);
                if (handlerParamSearch && handlerParamSearch[1]) {
                    params = params.replace(handlerParamSearch[1], values[handle]);
                    location.search = params;
                } else {
                    let handlerParam = encodeURIComponent(snapHandleParameter[handle]) + '=' + encodeURIComponent(values[handle]);
                    if (params) {
                        location.search = location.search + '&' + handlerParam;
                    } else {
                        location.search = location.search + '?' + handlerParam;
                    }
                }

            });
        }
    });
</script>
